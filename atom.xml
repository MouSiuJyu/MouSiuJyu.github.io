<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://MouSiuJyu.github.io/</id>
    <title>Gridea</title>
    <updated>2019-11-07T14:25:35.130Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://MouSiuJyu.github.io/"/>
    <link rel="self" href="https://MouSiuJyu.github.io//atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://MouSiuJyu.github.io//images/avatar.png</logo>
    <icon>https://MouSiuJyu.github.io//favicon.ico</icon>
    <rights>All rights reserved 2019, Gridea</rights>
    <entry>
        <title type="html"><![CDATA[APP接口]]></title>
        <id>https://MouSiuJyu.github.io//post/app-jie-kou</id>
        <link href="https://MouSiuJyu.github.io//post/app-jie-kou">
        </link>
        <updated>2019-11-07T07:21:26.000Z</updated>
        <content type="html"><![CDATA[<h1 id="什么是app接口">什么是APP接口</h1>
<p>客户端与服务端数据的交换<br>
大部分APP接口是通过HTTP协议通信的<br>
<img src="https://MouSiuJyu.github.io//post-images/1573111754151.png" alt=""></p>
<h1 id="客户端与服务端http通信">客户端与服务端HTTP通信</h1>
<figure data-type="image" tabindex="1"><img src="https://MouSiuJyu.github.io//post-images/1573111872729.png" alt=""></figure>
<h1 id="app接口输出格式">APP接口输出格式</h1>
<p>code 错误码<br>
msg  错误码对应的描述<br>
data 接口返回的数据</p>
<h1 id="api鉴权">API鉴权</h1>
<p>通过composer安装JWT  (JsonWebToken)</p>
<h1 id="数据加密生成签名">数据加密生成签名</h1>
<p>需要生成签名的参数：</p>
<p>1、did：设备号，即app每个设备的唯一标识</p>
<p>2、version：版本信息，例：v1.0</p>
<p>3、time：时间戳，这里采用的是10位的时间戳</p>
<p>通过以上的字段，通过一定的算法生成sign，然后请求api时带上sign以及以上参数，然后服务器根据接收到的参数使用同样的方法生成sign与接收的sign进行比对，如果一致则通过。</p>
<p>算法</p>
<p>获取当前时间戳，为了保持app与服务器端时间一致，写了个时间获取的函数。</p>
<p>1、使用did，version，time组装成数组</p>
<p>2、键按照字典顺序排序</p>
<p>3、生成did=aaaa&amp;time=123121&amp;version=v1.0</p>
<p>4、进行加密</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[面试问题]]></title>
        <id>https://MouSiuJyu.github.io//post/mian-shi-wen-ti</id>
        <link href="https://MouSiuJyu.github.io//post/mian-shi-wen-ti">
        </link>
        <updated>2019-10-15T14:52:45.000Z</updated>
        <content type="html"><![CDATA[<h1 id="数组默认值传递还是引用传递对象呢怎么改呢">数组默认值传递还是引用传递？对象呢？怎么改呢？</h1>
<p>数组默认值传递，对象默认值传递，改为引用传递可以加 &amp; ；</p>
<h1 id="json_decode和json_encode第二个参数是什么什么意思">json_decode和json_encode第二个参数是什么？什么意思？</h1>
<p>true或false，第二个参数是true代表数组，false（默认）返回对象</p>
<h1 id="php如何实现多继承">php如何实现多继承？</h1>
<p>可以使用 interface 或 trait 实现</p>
<h1 id="php如何实现动态继承">php如何实现动态继承？</h1>
<h1 id="yii内置函数用过哪些">yii内置函数用过哪些？</h1>
<h1 id="yii组件用过哪些">yii组件用过哪些？</h1>
<p>yii\jui\DatePicker  在 视图 中生成一个交互式日期选择器的 UI 组件</p>
<h1 id="说几个魔术函数">说几个魔术函数</h1>
<p>__construct()  实例化对象时被调用， 当__construct和以类名为函数名的函数同时存在时，      __construct将被调用，另一个不被调用</p>
<p>__destruct()  当删除一个对象或对象操作终止时被调用</p>
<p>__call()  对象调用某个方法， 若方法存在，则直接调用；若不存在，则会去调用__call函数</p>
<p>__get()   读取一个对象的属性时，若属性存在，则直接返回属性值；若不存在，则会调用__get函数。</p>
<p>__set()  设置一个对象的属性时， 若属性存在，则直接赋值；若不存在，则会调用__set函数。</p>
<p>__toString()  打印一个对象的时被调用</p>
<p>__clone()  克隆对象时被调用</p>
<p>__isset()  检测一个对象的属性是否存在时被调用</p>
<p>__unset()  unset一个对象的属性时被调用</p>
<p>__autoload()  实例化一个对象时，如果对应的类不存在，则该方法被调用。</p>
<h1 id="抽象类和接口的区别">抽象类和接口的区别</h1>
<p>1.对接口的继承使用implements,抽象类使用extends.</p>
<p>2.接口中不可以声明变量,但可以声明类常量.抽象类中可以声明各种变量</p>
<p>3.接口没有构造函数,抽象类可以有</p>
<p>4.接口中的方法默认为public,抽象类中的方法可以用public,protected,private修饰</p>
<p>5.一个类可以继承多个接口,但只能继承一个抽象类</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Redis和Memcache]]></title>
        <id>https://MouSiuJyu.github.io//post/redis-he-memcache</id>
        <link href="https://MouSiuJyu.github.io//post/redis-he-memcache">
        </link>
        <updated>2019-10-15T14:43:47.000Z</updated>
        <content type="html"><![CDATA[<h1 id="redis">Redis：</h1>
<p>适用于对读写效率要求高，数据处理业务复杂和对安全性要求高较高的系统，会话缓存、队列、数据堆栈。</p>
<h1 id="memcache">Memcache：</h1>
<p>适合多读少写，大数量的情况，缓存sql语句、用户临时性数据、延迟查询、session</p>
<h1 id="区别">区别：</h1>
<ul>
<li>memcache不可持久化数据，redis可持久化数据</li>
<li>redis支持的数据类型比较丰富，String、Hash、List、Set、Zset</li>
<li>memcache适合做缓存，redis速度较快。</li>
<li>memcache的value只有1MB，redis最大可达1GB。</li>
<li>memcache挂掉后数据不可恢复，redis可通过AOF恢复。</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[数据结构]]></title>
        <id>https://MouSiuJyu.github.io//post/shu-ju-jie-gou</id>
        <link href="https://MouSiuJyu.github.io//post/shu-ju-jie-gou">
        </link>
        <updated>2019-10-15T14:33:25.000Z</updated>
        <content type="html"><![CDATA[<h1 id="常见的数据结构">常见的数据结构</h1>
<p>Array：元素是相同的类型或类型的衍生。<br>
linkedList：链表，元素之间的关系是一对一。<br>
Stack:栈，和队列相似，储存数据先进后出，只有一个出口，只能从栈顶部增加或移除元素。<br>
Heap：堆，叫二叉堆，一个父节点有两个子节点，每个子节点又有两个子节点。<br>
List：线性表，由0个或多个数据元素组成的有序列，长度是元素个数，长度有限。<br>
doubly-linked-list：双向链表。<br>
Queue：队列，先进先出，并发中使用，可以安全地将对象从一个任务给另一个任务。<br>
Set：保存不重复元素。<br>
Map:字典，关联数组，也被叫做字典或键值对。<br>
Graph：图，邻接矩阵</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[MySQL知识点、语句优化、索引优化]]></title>
        <id>https://MouSiuJyu.github.io//post/sdcfcfcc</id>
        <link href="https://MouSiuJyu.github.io//post/sdcfcfcc">
        </link>
        <updated>2019-10-15T11:59:42.000Z</updated>
        <content type="html"><![CDATA[<h2 id="sql优化">sql优化</h2>
<ul>
<li>子查询优化，改为join查寻，注意是否有一对多的关系，避免数据重复。</li>
<li>拆分大的delete和insert语句。</li>
<li>字段类型 NOT NULL。</li>
<li>经常查询字段加索引。</li>
<li>使用有索引或主键进行order by 排序。</li>
<li>查询不需要的记录，使用limit。</li>
<li>多表关联和select查询，指定查询列。总取出全部列，会让索引失效。</li>
<li>重复查询相同的数据，可以缓存数据。</li>
<li>count查询使用count（*）效率更快。</li>
<li>避免在索引列上使用计算</li>
</ul>
<h2 id="索引优化">索引优化</h2>
<h3 id="索引对性能的影响大大减少服务器需要扫描的数据量帮助服务器避免排序和临时表大大提高查询速度-但是过多的索引会降低写的速度-占用磁盘空间">索引对性能的影响：大大减少服务器需要扫描的数据量，帮助服务器避免排序和临时表，大大提高查询速度。但是过多的索引会降低写的速度、占用磁盘空间。</h3>
<ul>
<li>避免重复索引和冗余索引，过多的索引不仅影响写入效率，也影响查询效率。</li>
<li>一个表只能有一个主键索引，但是可以有多个唯一索引。</li>
<li>组合索引要遵循前缀原则。</li>
<li>like查询时，%不能在前，可以使用全文索引。</li>
<li>column is null 可以使用索引。</li>
<li>MySQL估计使用索引更慢的话，会放弃使用索引。</li>
<li>如果or前的列有索引，后面没有，索引将不执行。</li>
<li>列类型是字符串，查询一定要给值加引号，否则索引失效。</li>
</ul>
<h2 id="mysql的存储引擎myisam和innodb的区别">MySQL的存储引擎，myisam和innoDB的区别</h2>
<ul>
<li>myisam适用于大量查询的应用，inoDB适用于写操作多的时候</li>
<li>myisam支持的是表锁，innoDB支持的是行锁</li>
<li>myisam支持全文检索</li>
<li>innoDB支持外检</li>
<li>myisam不支持崩溃后的修复</li>
<li>innoDB支持事物，事物有四个原则：ACID</li>
<li>MyISAM 是非事务的存储引擎；适合用于频繁查询的应用；表锁，不会出现死锁；不支持事务。适合小数据，小并发</li>
</ul>
<p>innodb是支持事务的存储引擎；适合于插入和更新操作比较多的应用；设计合理的话是行锁（最大区别就在锁的级别上）；适合大数据，大并发。</p>
<ol>
<li>原子性：要么全部执行，要么全部回滚</li>
<li>一致性</li>
<li>隔离性：多事务之前不影响</li>
<li>持久性：对数据库的影响是永久的</li>
</ol>
<h2 id="内连接分为三类">内连接，分为三类</h2>
<ul>
<li>等值连接：on A.id=B.id</li>
<li>不等值连接：on A.id&gt;B.id</li>
<li>自连接：select * from A T1 INNER JOIN A T2 ON T1.id=T2.pid</li>
</ul>
<h2 id="分析sql慢查询的方法慢查询日志show-statusdescexplian可查询单条语句">分析sql慢查询的方法：慢查询日志，show status，desc/explian（可查询单条语句）</h2>
<h2 id="分区和分库分表">分区和分库分表</h2>
<h3 id="分区的场景">分区的场景：</h3>
<ol>
<li>表非常大，无法全部存在内存，热点数据和历史数据分区。</li>
<li>数据更易维护，可以对独立的分区进行独立操作。</li>
<li>数据可以分布在不同的机器上，从而高效使用资源。</li>
<li>可以备份和恢复独立分区。<br>
<em>一个表只能有1204分分区</em><br>
<em>分区表不能使用外键</em><br>
<em>需要对现有表的结构进行修改</em><br>
<em>所有分区必须使用相同的存储引擎</em><br>
<em>某些存储引擎不支持分区</em></li>
</ol>
<h3 id="分库分表场景">分库分表场景：</h3>
<ul>
<li>单表记录条数达到百万、千万级别时，解决表锁问题</li>
</ul>
<h3 id="分表方式">分表方式</h3>
<ol>
<li>水平分割：有些数据常用，有些数据不常用</li>
<li>垂直分表：有些列常用，有些列不常用<br>
<em>有些分表的策略基于应用层的逻辑算法，一旦逻辑算法改变，整个分表逻辑就会改变，扩展性较差。对于应用层来说，逻辑算法增加开发成本。</em></li>
</ol>
<h2 id="sql查询的安全方案">sql查询的安全方案</h2>
<ul>
<li>使用预处理防sql注入。</li>
<li>写入数据库的数据要进行特殊字符的转义。</li>
<li>查询错误信息不要返回给用户，记录到日志中。</li>
<li>定期数据备份。</li>
<li>不给查询用户root权限。</li>
<li>关闭远程数据库访问权限。</li>
<li>删除多余用户。</li>
<li>限制一般用户浏览其他库。</li>
<li>限制用户对数据文件的访问权限。</li>
</ul>
]]></content>
    </entry>
</feed>